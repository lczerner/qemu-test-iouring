# Run liburing tests on emulated nvme in qemu

> QEMU with nvme support is required (v5.1.0 and later)!
> See <https://www.qemu.org/2020/08/11/qemu-5-1-0/>

Since not everyone has access to the proper nvme HW, let alone on multiple
architectures. This project aims to provide a convenient set of scripts to
run liburing tests on qemu emulated nvme device with polling support on
various architectures.

Currently only x86_64 and ppc64 is supported, but I hope to expand it soon.

> This is still very much work-in-progress. Use with caution!

## How it works

 1. It takes an OS image (rpm based such as Fedora, or CentOS) and makes some
    initial system preparations after which it will boot into the system.
 2. Qemu provides the system with a emulated nvme device with polling support.
 3. When booting for the first time it will install required tools to build
    and test liburing, update kernel and optionally install provided
    rpm packages. Then it reboots, possibly into new kernel.
 4. Assuming the installation was successful, it will create a partition on
    a nvme drive. One to use for block device testing and the other for a
    file based testing.
 5. Clone the liburing from a git repository and build it.
 6. Run the tests with `make runtests`
 7. After the test the virtual machine is shut down and the logs are copied
    over to the local host.

## Required tools

The following tools are required by the script:

* virt-sysprep
* qemu-system-x86_64
* qemu-system-ppc64
* wget
* virt-copy-out

On Fedora you should be able to install all of that with the following command:

> dnf -y install libguestfs-tools-c qemu-system-x86-core qemu-system-ppc-core wget

## How to use it

The configuration file provides a convenient way to have a different setup
for a different OS and/or architecture.

For example you can have multiple configuration files like this:

 * config.fedora.x86_64
 * config.rhel.x86_64
 * config.rhel.ppc64

Those can differ in ARCH, IMG etc. Additionally you can provide a custom rpm
repository containing a custom kernel, or kernel rpm package directly and
number of other options.

Conveniently the IMG can be URL and the image is downloaded automatically
if it does not exist yet.

Then, you can run the tests for example like this:

	./qemu-test-iouring.sh -C config.rhel.x86_64 -c

	./qemu-test-iouring.sh -C config.fedora.x86_64 -c -p kernel-5.9.0_rc3+-1.x86_64.rpm

	./qemu-test-iouring.sh -C config.rhel.ppc64 -c -r test.repo

> Note that you can use the -c option to preserve the original OS image.
> Otherwise the image will be changed directly and it currently does not
> provide a way to reinstall kernel or add additional packaged once the
> image is initialized. This is likely to change in the future.

## Configuration file

You can find example configuration file in `config.example`

<CONFIGURATION FILE>
## Usage

You can see what options are supported using help `./qemu-test-iouring.sh -h`

<USAGE MESSAGE>
